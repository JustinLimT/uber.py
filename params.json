{"name":"Uber.py","tagline":"Python client for Uber","body":"\"hey, I really wish I had uber.py...\"  \r\n\"OK, here you go\"\r\n\r\nuber.py - a Python client for Uber\r\n----------------------------------\r\n\r\n[![Build Status](https://secure.travis-ci.org/tals/uber.py.png?branch=master)](http://travis-ci.org/tals/uber.py)\r\n\r\n\r\nUsage example:\r\n```python\r\nfrom uber import UberClient\r\ntoken = UberClient.login('tal@test.org', 'my_password')\r\nclient = UberClient('tal@test.org', token)\r\n\r\napp_state = client.request_pickup('182 Howard St, San Francisco')\r\n```\r\n\r\nRationale\r\n---------\r\nRight now we're in this weird stage where we have services that are insanely popular, yet lack even the most\r\nbasic of APIs.\r\n\r\nThat kinda sucks. Let's change that.\r\n\r\nThis library strives to act as a reference for other libraries, and expose as much functionality of the API as possible.\r\n\r\nDesign\r\n------\r\nUber's clients are mostly stateless - for every request done against the server, Uber always returns the FULL STATE of the\r\napp, with things like \"what to put in the bottom bar\", \"is there a ride in progress\" etc.\r\n\r\nSince this is a Python library, and will typically be used in server/CLI environments, things that would normally be\r\nqueried by external systems (GPS location) are passed EXPLICITLY as arguments, rather than being queried via some callback.\r\nSadly it makes the API less convenient to use.\r\n\r\nIt would be really cool to have a \"pleasant\" client on top of this low-level one (e.g. have add_credit_card() return the payment\r\nprofile rather than the whole state, etc). Pull-requests are welcome :)\r\n\r\nSupported features\r\n----------------------------\r\n- Order and cancel a ride\r\n- Add/remove credit/debit cards\r\n- See the drivers in the area\r\n\r\n\r\nSupport\r\n-------\r\n- Python 2.7\r\n- PyPy\r\n\r\nInstallation\r\n-------------\r\n```\r\n$ pip install uber.py\r\n```\r\n\r\nUsage\r\n=====\r\n\r\nExamples\r\n--------\r\n- examples/ubercli.py: a fairly complete example that shows you how to ping, get a ride and cancel it.\r\n\r\n\r\nAuthenticating a user\r\n--------------------------\r\n```python\r\nfrom uber import UberClient\r\ntoken = UberClient.login('tal@test.org', 'my_password')\r\n>> token\r\n'my_token'\r\n```\r\n\r\nGetting the app state\r\n---------------------\r\n```python\r\nclient = UberClient('tal@test.org', 'my_token')\r\napp_state = client.ping()\r\n\r\n>>> print app_state.nearby_vehicles[UberCarType.UBERX]\r\n<class 'uber.models.NearbyVehicles'>\r\n    vehicle_paths: {\r\n        d2c0de3b-907f-49a4-8be8-756b8a2049bd:\t[\r\n            <class 'uber.models.VehicleLocation'>\r\n                course: -140\r\n                epoch: 2013-12-06 04:49:46.996000,\r\n            <class 'uber.models.VehicleLocation'>\r\n                course: -140\r\n                epoch: 2013-12-06 04:50:00.995000,\r\n            ...\r\n        ]\r\n        4b035b27-1544-44d5-93ea-7b3d6d33717a:\t[\r\n            <class 'uber.models.VehicleLocation'>\r\n                course: 170\r\n                epoch: 2013-12-06 04:49:34.148000,\r\n            ...\r\n        ]\r\n    ...\r\n    }\r\n    min_eta: 1\r\n    eta_string: u'1 minute'\r\n    eta_string_short: u'1 min'\r\n\r\n```\r\n\r\nGetting a ride\r\n--------------\r\n```python\r\nfrom uber import geolocate, UberVehicleType\r\ngeo_address = geolocate('182 Howard St, San Francisco')\r\napp_state = client.request_pickup(geo_address, UberVehicleType.UBERX)\r\n```\r\n\r\nCanceling\r\n---------\r\n```python\r\nclient.cancel_pickup()\r\n```\r\n\r\nPayments\r\n--------\r\n```python\r\nstate = client.add_payment('1111222233334444', '01', '99', '123', '94111', 'US')\r\n>>> state.client.payment_profiles\r\n[\r\n    <class 'uber.models.PaymentProfile'>\r\n        card_type: u'Visa'\r\n        id: 123456\r\n        card_expiration: 2099-01-01 00:00:00+00:00\r\n        use_case: u'personal'\r\n        card_number: u'4444'\r\n]\r\n\r\nclient.delete_payment_profile(123456)\r\n```\r\n\r\nChecking for surge rates\r\n------------------------\r\n```python\r\nfor view in state.city.vehicle_views.values():\r\n    if view.surge:\r\n        print '{name} has x{multiplier} surge rate'.format(\r\n            name=view.description,\r\n            multiplier=view.surge.multiplier)\r\n```\r\n\r\nFAQ\r\n===\r\nQ: What?  \r\nA: I was told by someone that I should have some projects on my Github account, so I figured that I might as well make\r\nsomething cool\r\n\r\nQ: Will I get banned for using this?  \r\nA: Maybe! I hope not. As it stands right now, Uber *CAN* tell this library apart from their official apps, as it makes\r\nno effort to look the same as them (It omits some fields, does not implement the caching mechanism etc).\r\n\r\nQ: What's missing?  \r\nA: bunch of stuff:\r\n- Feeding events to Uber's analytics system (see ```UberClient.Events``` & ```UberClient._send_event```)\r\n- Driver's side\r\n- Leaving feedback\r\n- PayPal integration\r\n\r\nQ: What about Lyft/Sidecar/Flywheel/omg there are so many of these  \r\nA: I've written a library for Lyft, but I'm sitting on it for now as I want to gauge interest first (plus I don't want\r\nto get banned from Lyft).\r\nAbout the others - I honestly don't use them at all, but we'll see!\r\n\r\nQ: Anything else?  \r\nA: I'll buy a cookie to the first person who will write a Twilio-Uber mashup that lets people order Uber with a text.\r\nWhat's cool about it is that it will allow people with feature phones to use Uber.\r\nI was thinking of something like:\r\n```\r\n>> Pickup UberX 182 Howard St, San Francisco\r\n<< Scheduling a pickup to 182 Howard Street, San Francisco, CA 94105, USA\r\n<< John will pick you up in 5 mins with a green Toyota Prius.\r\n>> ping\r\n<< John will pick you up in 2 mins with a green Toyota Prius.\r\n>> cancel\r\n<< ride has been cancelled.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}